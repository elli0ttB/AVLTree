import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class AVLTree<K extends Comparable<K>, V> extends BinarySearchTree<K, V> {
	ArrayList<BSTNode> putTrace = new ArrayList<BSTNode>();

	/**
	 * Adds a given value indexed with a given key to the tree according to the
	 * binary search structure
	 * 
	 * @param key
	 *            - the key of the given element
	 * @param value
	 *            - the value of the given element
	 */

	@Override
	public void put(K key, V value) {

		if (root == null) {
			root = new BSTNode(key, value);
		} else {
			ArrayList<BSTNode> putTrace = new ArrayList<BSTNode>();
			putHelper(root, key, value, putTrace);
			checkBalance(putTrace);
		}
		size++;
	}

	// each call to putHelper context to be the current information after the call
	private void putHelper(BSTNode n, K key, V value, List<BSTNode> putTrace) {
		putTrace.add(n);
		
		if (key.compareTo(n.key) > 0) {
			if (n.right == null) {
				n.right = new BSTNode(key, value);
				putTrace.add(n.right);
			} else {
				putHelper(n.right, key, value, putTrace);
			}
			
		} else {
			if (n.left == null) {
				n.left = new BSTNode(key, value);
			} else {
				putHelper(n.left, key, value, putTrace);
				putTrace.add(n.left);
			}
		}
	}
	
	private void checkBalance(List<BSTNode> putTrace){
		BSTNode top;
		// we start two from the end
		for(int h = 2; h < putTrace.size(); h++){
			top = putTrace.get(putTrace.size() - (1+h));
			if (Math.abs((getHeight(top.left) - h)) > 1){
				balance(h, top);
				return;
			}
		}
	}
	
	// use the balancing context to figure things out
	private void balance(int index, BSTNode unbalanced){
		BSTNode child = putTrace.get(index + 1);
		BSTNode grandchild = putTrace.get(index + 2);
		boolean childIsLeft = unbalanced.left == child;
		boolean grandchildIsLeft = child.left == grandchild;
	
		if (childIsLeft && grandchildIsLeft){
			leftLeft(index, unbalanced);
		} else if (childIsLeft && ! grandchildIsLeft){
			leftRight(index, unbalanced);
		} else if (grandchildIsLeft){
			rightLeft(index, unbalanced);
		} else {
			rightRight(index, unbalanced);
		}
	}
	
	private void leftLeft(int index, BSTNode unbalanced){
		
	}
	private void leftRight(int index, BSTNode unbalanced){
		
	}
	
	private void rightLeft(int index, BSTNode unbalanced){
		
	}
	
	private void rightRight(int index, BSTNode unbalanced){
		
	}

	
	
	private void replace(BSTNode parent, BSTNode oldChild, BSTNode newChild){
		if (oldChild == parent.right){
			parent.right = newChild;
		} else {
			parent.left = newChild;
		}
	}
	
	public void addToLeftSubTreeOfRightChild(BSTNode n){
		BSTNode left = n.right.left;
		n.right.left = n;
		n.right = left;
	}
	
	
	public V remove(K key) {
		if (key == null) {
			throw new NullPointerException();
		}
		if (root == null) {
			return null;
		}
		int compare = key.compareTo(root.key);
		if (compare == 0) {
			return removeRoot();
		}

		// main loop for searching for node to replace
		BSTNode parent = root;
		BSTNode current = continueSearch(parent, compare);
		while (current != null) {
			compare = key.compareTo(current.key);
			if (compare == 0) {
				return removeNodeAndCleanup(current, parent);
			}
			parent = current;
			current = continueSearch(current, compare);
		}
		// node not found
		return null;
	}

	private V removeRoot() {
		V result = root.value;
		if (root.right != null) {
			addLefttoRight(root);
			root = root.right;
		} else {
			root = root.left;
		}
		size--;
		return result;
	}

	private BSTNode continueSearch(BSTNode node, int compare){
		return compare < 0 ? node.left : node.right;
	}

	private V removeNodeAndCleanup(BSTNode toRemove, BSTNode parent) {
		V result = toRemove.value;
		BSTNode replacementChild;
		if (toRemove.right != null) {
			addLefttoRight(toRemove);
			replacementChild = toRemove.right;
		} else {
			replacementChild = toRemove.left;
		}

		if (toRemove == parent.right) {
			parent.right = replacementChild;
		} else {
			parent.left = replacementChild;
		}
		size--;
		return result;
	}

}
